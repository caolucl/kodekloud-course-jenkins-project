pipeline {
    agent any

    environment {
        IMAGE_NAME = 'caolucl/jenkins-flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        
    }

    
    stages {

        stage('Setup') {
            steps {
                sh '''
                    whoami
                    cd 04-docker
                    pip install -r requirements.txt
                '''
            }
        }
        stage('Test') {
            steps {
                sh '''
                    cd 04-docker
                    pytest
                '''
            }
        }

        stage('Login to docker hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh 'echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin'}
                echo 'Login successfully'
            }
        }

        stage('Build Docker Image')
        {
            steps
            {
                sh '''
                    cd 04-docker
                    docker build -t ${IMAGE_TAG} .
                    echo "Docker image build successfully"
                    docker image ls
                    
                '''
            }
        }
        stage('Vulnerability Scan - Docker Trivy') {
            steps
            {
                sh '''
                    #trivy image --format json -o result.json --severity CRITICAL ${IMAGE_TAG}  --exit-code 1
                    trivy image --format json -o result.json --severity CRITICAL ${IMAGE_TAG}  --exit-code 0
                '''
            }
        }

        stage('Push Docker Image')
        {
            steps
            {
                sh 'docker push ${IMAGE_TAG}'
                echo "Docker image push successfully"
            }
        }
        stage('Approval Required') {
            steps {
                script {
                    def userInput = input(id: 'userInput', message: 'Approve and Provide docker image', parameters: [
                        string(name: 'DOCKER_IMAGE', defaultValue: 'defaultValue', description: 'Enter the docker image')
                    ])
                    env.DOCKER_IMAGE = userInput
                }
            }
        }
        stage('Deploy Docker Image') {
            steps {
                script {
                    echo "Deploying Docker image ${env.DOCKER_IMAGE}"
                    sh "docker run --name ${env.DOCKER_IMAGE} -d ${IMAGE_TAG} "
                }
            }
        }
    }
}
